@page "/monitor"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignals.Shared;
@inject NavigationManager _navigation
@inject IJSRuntime _jsRunTime
@implements IAsyncDisposable

<h3>Real Time Sensor</h3>
<hr class="hr" />
<p>This is an experiment on providing Real-time Charts</p>
<table class="table table-bordered table-sm">
    <tr>
        <td>Sender</td>
        <td>@sensorSender</td>
    </tr>
    <tr>
        <td>Signal Time</td>
        <td>@sensorTime</td>
    </tr>
    <tr>
        <td>Sensor Value</td>
        <td>@sensorValue</td>
    </tr>
</table>
<br />
<canvas id="chart" style="width: 100%; height: 250px"></canvas>
<br />
<div class="card">
    <div class="card-body">
<pre id="echo">@status</pre>
    </div>
</div>

@code {
    HubConnection connection;
    string sensorSender  = "Tempeature Gradient, C";
    string sensorTime = "00:00:00.000";
    string sensorValue = "0.000000";
    string status;
    long pulses = 0;

    IJSObjectReference _module;

    protected override async Task OnInitializedAsync()
    {
        var url = _navigation.ToAbsoluteUri("/sensorHub");
        var mod = "./modules/chart-sensor.js";
        try {
            // interoperability
            _module = await _jsRunTime.InvokeAsync<IJSObjectReference>("import", mod);
            await _module.InvokeVoidAsync("init");
            // signalr
            connection = new HubConnectionBuilder().WithUrl(url).Build();
            // to subscribe, map exactly the hub's function
            connection.On<string, Pulse>("Broadcast", (sender, pulse) => {
                sensorTime = pulse.Timestamp.ToString("HH:mm:ss.fff");
                sensorValue = pulse.Value.ToString("N6");
                status = $"Pulses count: {pulses++}";
                // update table
                StateHasChanged();
                // interoperability
                _module.InvokeVoidAsync("updateChart", pulse);
            });
            await connection.StartAsync();
            status = "Status: " 
                   + (IsConnected ? "Waiting for broadcast events." : "Without connection");
        }
        catch (Exception exception) {
            status = $"Exception:\n{exception.Message}";
        }
    }

    public bool IsConnected => connection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() => await connection.DisposeAsync();
}


